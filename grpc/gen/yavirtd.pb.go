// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: grpc/gen/yavirtd.proto

package yavpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{0}
}

type CopyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Dest     string `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`
	Content  []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Override bool   `protobuf:"varint,4,opt,name=override,proto3" json:"override,omitempty"`
	Uid      int64  `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid      int64  `protobuf:"varint,6,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *CopyOptions) Reset() {
	*x = CopyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyOptions) ProtoMessage() {}

func (x *CopyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyOptions.ProtoReflect.Descriptor instead.
func (*CopyOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{1}
}

func (x *CopyOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CopyOptions) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *CopyOptions) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CopyOptions) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

func (x *CopyOptions) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CopyOptions) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

type CopyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CopyMessage) Reset() {
	*x = CopyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyMessage) ProtoMessage() {}

func (x *CopyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyMessage.ProtoReflect.Descriptor instead.
func (*CopyMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{2}
}

func (x *CopyMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CatOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *CatOptions) Reset() {
	*x = CatOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatOptions) ProtoMessage() {}

func (x *CatOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatOptions.ProtoReflect.Descriptor instead.
func (*CatOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{3}
}

func (x *CatOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CatOptions) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CatMessage) Reset() {
	*x = CatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatMessage) ProtoMessage() {}

func (x *CatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatMessage.ProtoReflect.Descriptor instead.
func (*CatMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{4}
}

func (x *CatMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DisconnectNetworkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *DisconnectNetworkOptions) Reset() {
	*x = DisconnectNetworkOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectNetworkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectNetworkOptions) ProtoMessage() {}

func (x *DisconnectNetworkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectNetworkOptions.ProtoReflect.Descriptor instead.
func (*DisconnectNetworkOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{5}
}

func (x *DisconnectNetworkOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DisconnectNetworkOptions) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type ConnectNetworkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Ipv4    string `protobuf:"bytes,3,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6    string `protobuf:"bytes,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (x *ConnectNetworkOptions) Reset() {
	*x = ConnectNetworkOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectNetworkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectNetworkOptions) ProtoMessage() {}

func (x *ConnectNetworkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectNetworkOptions.ProtoReflect.Descriptor instead.
func (*ConnectNetworkOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectNetworkOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectNetworkOptions) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ConnectNetworkOptions) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *ConnectNetworkOptions) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

type CaptureGuestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	User       string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Overridden bool   `protobuf:"varint,4,opt,name=overridden,proto3" json:"overridden,omitempty"`
}

func (x *CaptureGuestOptions) Reset() {
	*x = CaptureGuestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureGuestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureGuestOptions) ProtoMessage() {}

func (x *CaptureGuestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureGuestOptions.ProtoReflect.Descriptor instead.
func (*CaptureGuestOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{7}
}

func (x *CaptureGuestOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CaptureGuestOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CaptureGuestOptions) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CaptureGuestOptions) GetOverridden() bool {
	if x != nil {
		return x.Overridden
	}
	return false
}

type UserImageMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Distro        string `protobuf:"bytes,3,opt,name=distro,proto3" json:"distro,omitempty"`
	LatestVersion int64  `protobuf:"varint,4,opt,name=latest_version,json=latestVersion,proto3" json:"latest_version,omitempty"`
	Size          int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *UserImageMessage) Reset() {
	*x = UserImageMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserImageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserImageMessage) ProtoMessage() {}

func (x *UserImageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserImageMessage.ProtoReflect.Descriptor instead.
func (*UserImageMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{8}
}

func (x *UserImageMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserImageMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserImageMessage) GetDistro() string {
	if x != nil {
		return x.Distro
	}
	return ""
}

func (x *UserImageMessage) GetLatestVersion() int64 {
	if x != nil {
		return x.LatestVersion
	}
	return 0
}

func (x *UserImageMessage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PingMessage) Reset() {
	*x = PingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMessage) ProtoMessage() {}

func (x *PingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMessage.ProtoReflect.Descriptor instead.
func (*PingMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{9}
}

func (x *PingMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type InfoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cpu     int64  `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory  int64  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage int64  `protobuf:"varint,4,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *InfoMessage) Reset() {
	*x = InfoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoMessage) ProtoMessage() {}

func (x *InfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoMessage.ProtoReflect.Descriptor instead.
func (*InfoMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{10}
}

func (x *InfoMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InfoMessage) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *InfoMessage) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *InfoMessage) GetStorage() int64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

type GetGuestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGuestOptions) Reset() {
	*x = GetGuestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestOptions) ProtoMessage() {}

func (x *GetGuestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestOptions.ProtoReflect.Descriptor instead.
func (*GetGuestOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{11}
}

func (x *GetGuestOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetGuestMessage struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	TransitStatus        string            `protobuf:"bytes,3,opt,name=transit_status,json=transitStatus,proto3" json:"transit_status,omitempty"`
	CreateTime           int64             `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	TransitTime          int64             `protobuf:"varint,5,opt,name=transit_time,json=transitTime,proto3" json:"transit_time,omitempty"`
	UpdateTime           int64             `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Cpu                  int64             `protobuf:"varint,7,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory               int64             `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage              int64             `protobuf:"varint,9,opt,name=storage,proto3" json:"storage,omitempty"`
	ImageId              int64             `protobuf:"varint,10,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageName            string            `protobuf:"bytes,11,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	Networks             map[string]string `protobuf:"bytes,12,rep,name=networks,proto3" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels               map[string]string `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (x *GetGuestMessage) Reset() {
	*x = GetGuestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestMessage) ProtoMessage() {}

func (x *GetGuestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestMessage.ProtoReflect.Descriptor instead.
func (*GetGuestMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{12}
}

func (x *GetGuestMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetGuestMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetGuestMessage) GetTransitStatus() string {
	if x != nil {
		return x.TransitStatus
	}
	return ""
}

func (x *GetGuestMessage) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetGuestMessage) GetTransitTime() int64 {
	if x != nil {
		return x.TransitTime
	}
	return 0
}

func (x *GetGuestMessage) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GetGuestMessage) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *GetGuestMessage) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *GetGuestMessage) GetStorage() int64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *GetGuestMessage) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *GetGuestMessage) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *GetGuestMessage) GetNetworks() map[string]string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (m *GetGuestMessage) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type GetGuestIDListOptions struct {
	All                  bool              `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Filters              map[string]string `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetGuestIDListOptions) Reset()         { *m = GetGuestIDListOptions{} }
func (m *GetGuestIDListOptions) String() string { return proto.CompactTextString(m) }
func (*GetGuestIDListOptions) ProtoMessage()    {}
func (*GetGuestIDListOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4336cf6cb1ddfbb, []int{11}
}

func (m *GetGuestIDListOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGuestIDListOptions.Unmarshal(m, b)
}
func (m *GetGuestIDListOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGuestIDListOptions.Marshal(b, m, deterministic)
}
func (m *GetGuestIDListOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGuestIDListOptions.Merge(m, src)
}
func (m *GetGuestIDListOptions) XXX_Size() int {
	return xxx_messageInfo_GetGuestIDListOptions.Size(m)
}
func (m *GetGuestIDListOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGuestIDListOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GetGuestIDListOptions proto.InternalMessageInfo

func (m *GetGuestIDListOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *GetGuestIDListOptions) GetFilters() map[string]string {
	if m != nil {
		return m.Filters
	}
	return nil
}

type GetGuestIDListMessage struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGuestIDListMessage) Reset()         { *m = GetGuestIDListMessage{} }
func (m *GetGuestIDListMessage) String() string { return proto.CompactTextString(m) }
func (*GetGuestIDListMessage) ProtoMessage()    {}
func (*GetGuestIDListMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4336cf6cb1ddfbb, []int{12}
}

func (m *GetGuestIDListMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGuestIDListMessage.Unmarshal(m, b)
}
func (m *GetGuestIDListMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGuestIDListMessage.Marshal(b, m, deterministic)
}
func (m *GetGuestIDListMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGuestIDListMessage.Merge(m, src)
}
func (m *GetGuestIDListMessage) XXX_Size() int {
	return xxx_messageInfo_GetGuestIDListMessage.Size(m)
}
func (m *GetGuestIDListMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGuestIDListMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetGuestIDListMessage proto.InternalMessageInfo

func (m *GetGuestIDListMessage) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetGuestUUIDMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetGuestUUIDMessage) Reset() {
	*x = GetGuestUUIDMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestUUIDMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestUUIDMessage) ProtoMessage() {}

func (x *GetGuestUUIDMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestUUIDMessage.ProtoReflect.Descriptor instead.
func (*GetGuestUUIDMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{13}
}

func (x *GetGuestUUIDMessage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CreateGuestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu        int64             `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory     int64             `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	ImageName  string            `protobuf:"bytes,3,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	Volumes    map[string]int64  `protobuf:"bytes,4,rep,name=volumes,proto3" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DmiUuid    string            `protobuf:"bytes,5,opt,name=dmi_uuid,json=dmiUuid,proto3" json:"dmi_uuid,omitempty"`
	Labels     map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AncestorId string            `protobuf:"bytes,7,opt,name=ancestor_id,json=ancestorId,proto3" json:"ancestor_id,omitempty"`
	ImageUser  string            `protobuf:"bytes,8,opt,name=image_user,json=imageUser,proto3" json:"image_user,omitempty"`
}

func (x *CreateGuestOptions) Reset() {
	*x = CreateGuestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuestOptions) ProtoMessage() {}

func (x *CreateGuestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuestOptions.ProtoReflect.Descriptor instead.
func (*CreateGuestOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{14}
}

func (x *CreateGuestOptions) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CreateGuestOptions) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CreateGuestOptions) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *CreateGuestOptions) GetVolumes() map[string]int64 {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *CreateGuestOptions) GetDmiUuid() string {
	if x != nil {
		return x.DmiUuid
	}
	return ""
}

func (x *CreateGuestOptions) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateGuestOptions) GetAncestorId() string {
	if x != nil {
		return x.AncestorId
	}
	return ""
}

func (x *CreateGuestOptions) GetImageUser() string {
	if x != nil {
		return x.ImageUser
	}
	return ""
}

type ResizeGuestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cpu     int64            `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory  int64            `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Volumes map[string]int64 `protobuf:"bytes,4,rep,name=volumes,proto3" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ResizeGuestOptions) Reset() {
	*x = ResizeGuestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeGuestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeGuestOptions) ProtoMessage() {}

func (x *ResizeGuestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeGuestOptions.ProtoReflect.Descriptor instead.
func (*ResizeGuestOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{15}
}

func (x *ResizeGuestOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResizeGuestOptions) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ResizeGuestOptions) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ResizeGuestOptions) GetVolumes() map[string]int64 {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type CreateGuestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	TransitStatus string            `protobuf:"bytes,3,opt,name=transit_status,json=transitStatus,proto3" json:"transit_status,omitempty"`
	CreateTime    int64             `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	TransitTime   int64             `protobuf:"varint,5,opt,name=transit_time,json=transitTime,proto3" json:"transit_time,omitempty"`
	UpdateTime    int64             `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Cpu           int64             `protobuf:"varint,7,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        int64             `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage       int64             `protobuf:"varint,9,opt,name=storage,proto3" json:"storage,omitempty"`
	ImageId       int64             `protobuf:"varint,10,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	ImageName     string            `protobuf:"bytes,11,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	Networks      map[string]string `protobuf:"bytes,12,rep,name=networks,proto3" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ImageUser     string            `protobuf:"bytes,13,opt,name=image_user,json=imageUser,proto3" json:"image_user,omitempty"`
}

func (x *CreateGuestMessage) Reset() {
	*x = CreateGuestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuestMessage) ProtoMessage() {}

func (x *CreateGuestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuestMessage.ProtoReflect.Descriptor instead.
func (*CreateGuestMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{16}
}

func (x *CreateGuestMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateGuestMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateGuestMessage) GetTransitStatus() string {
	if x != nil {
		return x.TransitStatus
	}
	return ""
}

func (x *CreateGuestMessage) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateGuestMessage) GetTransitTime() int64 {
	if x != nil {
		return x.TransitTime
	}
	return 0
}

func (x *CreateGuestMessage) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CreateGuestMessage) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CreateGuestMessage) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CreateGuestMessage) GetStorage() int64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *CreateGuestMessage) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *CreateGuestMessage) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *CreateGuestMessage) GetNetworks() map[string]string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *CreateGuestMessage) GetImageUser() string {
	if x != nil {
		return x.ImageUser
	}
	return ""
}

type ControlGuestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Force     bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *ControlGuestOptions) Reset() {
	*x = ControlGuestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlGuestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlGuestOptions) ProtoMessage() {}

func (x *ControlGuestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlGuestOptions.ProtoReflect.Descriptor instead.
func (*ControlGuestOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{17}
}

func (x *ControlGuestOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ControlGuestOptions) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *ControlGuestOptions) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ControlGuestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ControlGuestMessage) Reset() {
	*x = ControlGuestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlGuestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlGuestMessage) ProtoMessage() {}

func (x *ControlGuestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlGuestMessage.ProtoReflect.Descriptor instead.
func (*ControlGuestMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{18}
}

func (x *ControlGuestMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type AttachGuestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReplCmd  []byte   `protobuf:"bytes,2,opt,name=repl_cmd,json=replCmd,proto3" json:"repl_cmd,omitempty"`
	Force    bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Safe     bool     `protobuf:"varint,4,opt,name=safe,proto3" json:"safe,omitempty"`
	Commands []string `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *AttachGuestOptions) Reset() {
	*x = AttachGuestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachGuestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachGuestOptions) ProtoMessage() {}

func (x *AttachGuestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachGuestOptions.ProtoReflect.Descriptor instead.
func (*AttachGuestOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{19}
}

func (x *AttachGuestOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AttachGuestOptions) GetReplCmd() []byte {
	if x != nil {
		return x.ReplCmd
	}
	return nil
}

func (x *AttachGuestOptions) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *AttachGuestOptions) GetSafe() bool {
	if x != nil {
		return x.Safe
	}
	return false
}

func (x *AttachGuestOptions) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type AttachGuestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AttachGuestMessage) Reset() {
	*x = AttachGuestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachGuestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachGuestMessage) ProtoMessage() {}

func (x *AttachGuestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachGuestMessage.ProtoReflect.Descriptor instead.
func (*AttachGuestMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{20}
}

func (x *AttachGuestMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AttachGuestMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResizeWindowOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Width  int64  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *ResizeWindowOptions) Reset() {
	*x = ResizeWindowOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeWindowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeWindowOptions) ProtoMessage() {}

func (x *ResizeWindowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeWindowOptions.ProtoReflect.Descriptor instead.
func (*ResizeWindowOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{21}
}

func (x *ResizeWindowOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResizeWindowOptions) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ResizeWindowOptions) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

type ExecuteGuestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Commands []string `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *ExecuteGuestOptions) Reset() {
	*x = ExecuteGuestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteGuestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteGuestOptions) ProtoMessage() {}

func (x *ExecuteGuestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteGuestOptions.ProtoReflect.Descriptor instead.
func (*ExecuteGuestOptions) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{22}
}

func (x *ExecuteGuestOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecuteGuestOptions) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type ExecuteGuestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ExitCode int64  `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *ExecuteGuestMessage) Reset() {
	*x = ExecuteGuestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteGuestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteGuestMessage) ProtoMessage() {}

func (x *ExecuteGuestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteGuestMessage.ProtoReflect.Descriptor instead.
func (*ExecuteGuestMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{23}
}

func (x *ExecuteGuestMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExecuteGuestMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecuteGuestMessage) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type ConnectNetworkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
}

func (x *ConnectNetworkMessage) Reset() {
	*x = ConnectNetworkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectNetworkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectNetworkMessage) ProtoMessage() {}

func (x *ConnectNetworkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectNetworkMessage.ProtoReflect.Descriptor instead.
func (*ConnectNetworkMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{24}
}

func (x *ConnectNetworkMessage) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

type DisconnectNetworkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DisconnectNetworkMessage) Reset() {
	*x = DisconnectNetworkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_gen_yavirtd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectNetworkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectNetworkMessage) ProtoMessage() {}

func (x *DisconnectNetworkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gen_yavirtd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectNetworkMessage.ProtoReflect.Descriptor instead.
func (*DisconnectNetworkMessage) Descriptor() ([]byte, []int) {
	return file_grpc_gen_yavirtd_proto_rawDescGZIP(), []int{25}
}

func (x *DisconnectNetworkMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type EventMessage struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	TimeNano             int64    `protobuf:"varint,4,opt,name=time_nano,json=timeNano,proto3" json:"time_nano,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventMessage) Reset()         { *m = EventMessage{} }
func (m *EventMessage) String() string { return proto.CompactTextString(m) }
func (*EventMessage) ProtoMessage()    {}
func (*EventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4336cf6cb1ddfbb, []int{26}
}

func (m *EventMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventMessage.Unmarshal(m, b)
}
func (m *EventMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventMessage.Marshal(b, m, deterministic)
}
func (m *EventMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMessage.Merge(m, src)
}
func (m *EventMessage) XXX_Size() int {
	return xxx_messageInfo_EventMessage.Size(m)
}
func (m *EventMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EventMessage proto.InternalMessageInfo

func (m *EventMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventMessage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventMessage) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *EventMessage) GetTimeNano() int64 {
	if m != nil {
		return m.TimeNano
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "yavpb.Empty")
	proto.RegisterType((*CatOptions)(nil), "yavpb.CatOptions")
	proto.RegisterType((*CatMessage)(nil), "yavpb.CatMessage")
	proto.RegisterType((*DisconnectNetworkOptions)(nil), "yavpb.DisconnectNetworkOptions")
	proto.RegisterType((*ConnectNetworkOptions)(nil), "yavpb.ConnectNetworkOptions")
	proto.RegisterType((*CaptureGuestOptions)(nil), "yavpb.CaptureGuestOptions")
	proto.RegisterType((*UserImageMessage)(nil), "yavpb.UserImageMessage")
	proto.RegisterType((*PingMessage)(nil), "yavpb.PingMessage")
	proto.RegisterType((*InfoMessage)(nil), "yavpb.InfoMessage")
	proto.RegisterType((*GetGuestOptions)(nil), "yavpb.GetGuestOptions")
	proto.RegisterType((*GetGuestMessage)(nil), "yavpb.GetGuestMessage")
	proto.RegisterMapType((map[string]string)(nil), "yavpb.GetGuestMessage.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "yavpb.GetGuestMessage.NetworksEntry")
	proto.RegisterType((*GetGuestIDListOptions)(nil), "yavpb.GetGuestIDListOptions")
	proto.RegisterMapType((map[string]string)(nil), "yavpb.GetGuestIDListOptions.FiltersEntry")
	proto.RegisterType((*GetGuestIDListMessage)(nil), "yavpb.GetGuestIDListMessage")
	proto.RegisterType((*GetGuestUUIDMessage)(nil), "yavpb.GetGuestUUIDMessage")
	proto.RegisterType((*CreateGuestOptions)(nil), "yavpb.CreateGuestOptions")
	proto.RegisterMapType((map[string]string)(nil), "yavpb.CreateGuestOptions.LabelsEntry")
	proto.RegisterMapType((map[string]int64)(nil), "yavpb.CreateGuestOptions.VolumesEntry")
	proto.RegisterType((*ResizeGuestOptions)(nil), "yavpb.ResizeGuestOptions")
	proto.RegisterMapType((map[string]int64)(nil), "yavpb.ResizeGuestOptions.VolumesEntry")
	proto.RegisterType((*CreateGuestMessage)(nil), "yavpb.CreateGuestMessage")
	proto.RegisterMapType((map[string]string)(nil), "yavpb.CreateGuestMessage.NetworksEntry")
	proto.RegisterType((*ControlGuestOptions)(nil), "yavpb.ControlGuestOptions")
	proto.RegisterType((*ControlGuestMessage)(nil), "yavpb.ControlGuestMessage")
	proto.RegisterType((*AttachGuestOptions)(nil), "yavpb.AttachGuestOptions")
	proto.RegisterType((*AttachGuestMessage)(nil), "yavpb.AttachGuestMessage")
	proto.RegisterType((*ResizeWindowOptions)(nil), "yavpb.ResizeWindowOptions")
	proto.RegisterType((*ExecuteGuestOptions)(nil), "yavpb.ExecuteGuestOptions")
	proto.RegisterType((*ExecuteGuestMessage)(nil), "yavpb.ExecuteGuestMessage")
	proto.RegisterType((*ConnectNetworkMessage)(nil), "yavpb.ConnectNetworkMessage")
	proto.RegisterType((*DisconnectNetworkMessage)(nil), "yavpb.DisconnectNetworkMessage")
	proto.RegisterType((*EventMessage)(nil), "yavpb.EventMessage")
}

func init() {
	proto.RegisterFile("grpc/gen/yavirtd.proto", fileDescriptor_c4336cf6cb1ddfbb)
}

var fileDescriptor_c4336cf6cb1ddfbb = []byte{
	// 1365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x5f, 0x73, 0xdb, 0x44,
	0x10, 0x8f, 0xad, 0xc4, 0x56, 0xd6, 0x4e, 0x49, 0x2f, 0x34, 0x28, 0xa2, 0xd0, 0xf4, 0x86, 0xd2,
	0x96, 0x3f, 0x49, 0xa7, 0x30, 0x9d, 0x52, 0x60, 0x86, 0x8e, 0x93, 0x96, 0xcc, 0x94, 0xd0, 0x71,
	0x49, 0x3b, 0x7d, 0xf2, 0x5c, 0xa5, 0x8b, 0x73, 0x53, 0x4b, 0xa7, 0xd1, 0x9d, 0xdd, 0x9a, 0x77,
	0x1e, 0xf8, 0x2a, 0x3c, 0xf1, 0xca, 0x0b, 0x9f, 0x80, 0xef, 0xc1, 0xd7, 0x60, 0xee, 0x8f, 0x64,
	0xc9, 0x96, 0xdc, 0x96, 0xf2, 0xc8, 0xdb, 0xed, 0xde, 0xde, 0xde, 0xee, 0xea, 0xb7, 0x3f, 0xad,
	0x04, 0xdb, 0xc3, 0x34, 0x09, 0xf6, 0x87, 0x34, 0xde, 0x9f, 0x92, 0x09, 0x4b, 0x65, 0xb8, 0x97,
	0xa4, 0x5c, 0x72, 0xb4, 0x36, 0x25, 0x93, 0xe4, 0x19, 0x6e, 0xc3, 0xda, 0x61, 0x94, 0xc8, 0x29,
	0xbe, 0x01, 0xd0, 0x23, 0xf2, 0xc7, 0x44, 0x32, 0x1e, 0x0b, 0x74, 0x0e, 0x9a, 0x2c, 0xf4, 0x1a,
	0xbb, 0x8d, 0x6b, 0xeb, 0xfd, 0x26, 0x0b, 0x11, 0x82, 0xd5, 0x84, 0xc8, 0x33, 0xaf, 0xa9, 0x35,
	0x7a, 0x8d, 0x77, 0xf5, 0x89, 0x1f, 0xa8, 0x10, 0x64, 0x48, 0x95, 0x45, 0x48, 0x24, 0xd1, 0x67,
	0xba, 0x7d, 0xbd, 0xc6, 0x07, 0xe0, 0x1d, 0x30, 0x11, 0xf0, 0x38, 0xa6, 0x81, 0x3c, 0xa6, 0xf2,
	0x05, 0x4f, 0x9f, 0xd7, 0xdd, 0xe0, 0x41, 0x3b, 0x36, 0x16, 0xf6, 0x92, 0x4c, 0xc4, 0x0c, 0x2e,
	0xf4, 0xde, 0xce, 0x85, 0x0a, 0x8e, 0x25, 0x93, 0x2f, 0x3d, 0xc7, 0x84, 0xaf, 0xd6, 0x56, 0x77,
	0xcb, 0x5b, 0xcd, 0x75, 0xb7, 0x70, 0x04, 0x5b, 0x3d, 0x92, 0xc8, 0x71, 0x4a, 0xef, 0x8f, 0xa9,
	0x58, 0x56, 0x8d, 0x98, 0x44, 0x34, 0xab, 0x86, 0x5a, 0x2b, 0xdd, 0x58, 0xd0, 0x34, 0xbb, 0x42,
	0xad, 0xd1, 0x87, 0x00, 0x7c, 0x42, 0xd3, 0x94, 0x85, 0x21, 0x8d, 0xf5, 0x45, 0x6e, 0xbf, 0xa0,
	0xc1, 0xbf, 0x36, 0x60, 0xf3, 0x44, 0xd0, 0xf4, 0x28, 0x22, 0x43, 0x9a, 0x15, 0xf2, 0x75, 0x2e,
	0xdb, 0x86, 0x56, 0xc8, 0x84, 0x4c, 0xb9, 0xbd, 0xce, 0x4a, 0xe8, 0x0a, 0x9c, 0x1b, 0x11, 0x49,
	0x85, 0x1c, 0x4c, 0x68, 0x2a, 0x18, 0x37, 0x97, 0x3a, 0xfd, 0x0d, 0xa3, 0x7d, 0x6c, 0x94, 0xca,
	0xa5, 0x60, 0x3f, 0x53, 0x6f, 0x4d, 0x6f, 0xea, 0x35, 0xbe, 0x0a, 0x9d, 0x87, 0x2c, 0x1e, 0x66,
	0x51, 0x78, 0xd0, 0xce, 0x5c, 0x98, 0x50, 0x32, 0x11, 0x13, 0xe8, 0x1c, 0xc5, 0xa7, 0xbc, 0x2e,
	0xdc, 0x4d, 0x70, 0x82, 0x64, 0xac, 0xa3, 0x75, 0xfa, 0x6a, 0xa9, 0x82, 0x8d, 0x68, 0xc4, 0xd3,
	0xa9, 0x0e, 0xd6, 0xe9, 0x5b, 0x49, 0x5d, 0x21, 0x24, 0x4f, 0xc9, 0x90, 0xda, 0x28, 0x33, 0x11,
	0x5f, 0x86, 0x77, 0xee, 0x53, 0xb9, 0xec, 0x11, 0xe0, 0x3f, 0x56, 0x67, 0x36, 0x75, 0xa1, 0x6c,
	0x43, 0x4b, 0x48, 0x22, 0xc7, 0xc2, 0xd6, 0xce, 0x4a, 0xaa, 0x4a, 0x32, 0x25, 0xb1, 0x60, 0x72,
	0x60, 0xf7, 0x4d, 0x15, 0x37, 0xac, 0xf6, 0x91, 0x31, 0xbb, 0x04, 0x9d, 0x20, 0xa5, 0x44, 0xd2,
	0x81, 0x64, 0x51, 0x16, 0x23, 0x18, 0xd5, 0x4f, 0x2c, 0xa2, 0xe8, 0x32, 0x74, 0x33, 0x3f, 0xda,
	0xc2, 0x94, 0xb3, 0x63, 0x75, 0xda, 0xe4, 0x12, 0x74, 0xc6, 0x49, 0x98, 0xfb, 0x68, 0x19, 0x1f,
	0x46, 0xa5, 0x0d, 0x6c, 0xb9, 0xda, 0x55, 0xe5, 0x72, 0xeb, 0xca, 0xb5, 0x5e, 0x2a, 0x17, 0xda,
	0x01, 0x97, 0x29, 0x04, 0x0d, 0x58, 0xe8, 0x81, 0xd9, 0xd2, 0xf2, 0x51, 0x88, 0x3e, 0x00, 0x30,
	0x5b, 0x1a, 0x42, 0x1d, 0x9d, 0xe6, 0xba, 0xd6, 0x1c, 0x2b, 0x1c, 0x7d, 0x07, 0xae, 0x6d, 0x11,
	0xe1, 0x75, 0x77, 0x9d, 0x6b, 0x9d, 0x9b, 0x1f, 0xed, 0x69, 0x5e, 0xd8, 0x9b, 0xab, 0xed, 0x9e,
	0x6d, 0x3d, 0x71, 0x18, 0xcb, 0x74, 0xda, 0xcf, 0x4f, 0xa1, 0x3b, 0xd0, 0x1a, 0x91, 0x67, 0x74,
	0x24, 0xbc, 0x0d, 0x7d, 0x1e, 0xd7, 0x9c, 0x7f, 0xa0, 0x8d, 0xcc, 0x69, 0x7b, 0xc2, 0xff, 0x1a,
	0x36, 0x4a, 0x6e, 0x55, 0x31, 0x9e, 0xd3, 0xa9, 0x7d, 0x82, 0x6a, 0x89, 0xde, 0x85, 0xb5, 0x09,
	0x19, 0x8d, 0x33, 0xf4, 0x1b, 0xe1, 0x4e, 0xf3, 0x76, 0xc3, 0xff, 0x0a, 0x3a, 0x05, 0x9f, 0x6f,
	0x72, 0x14, 0xff, 0xd6, 0x80, 0x0b, 0x59, 0x7c, 0x47, 0x07, 0x0f, 0xd8, 0x0c, 0x65, 0x9b, 0xe0,
	0x90, 0xd1, 0x48, 0x7b, 0x71, 0xfb, 0x6a, 0x89, 0x7a, 0xd0, 0x3e, 0x65, 0x23, 0x49, 0x53, 0x05,
	0x22, 0x95, 0xe0, 0xf5, 0xb9, 0x04, 0x4b, 0x0e, 0xf6, 0xee, 0x19, 0x5b, 0x93, 0x67, 0x76, 0xd2,
	0xbf, 0x03, 0xdd, 0xe2, 0xc6, 0x1b, 0x05, 0x7b, 0x7d, 0x3e, 0xd6, 0x0c, 0xed, 0x9b, 0xe0, 0xb0,
	0x50, 0x78, 0x8d, 0x5d, 0x47, 0x39, 0x61, 0xa1, 0xc0, 0xd7, 0x61, 0x2b, 0x33, 0x3d, 0x39, 0x39,
	0x3a, 0x28, 0x30, 0xf3, 0x78, 0x9c, 0x37, 0x86, 0x5e, 0xe3, 0xdf, 0x1d, 0x40, 0x3d, 0x8d, 0xe4,
	0x52, 0x97, 0x59, 0x34, 0x36, 0xaa, 0xd0, 0xd8, 0x2c, 0xa1, 0xb1, 0x0c, 0x2c, 0x67, 0x11, 0x58,
	0xed, 0x09, 0x1f, 0x8d, 0x23, 0x2a, 0xbc, 0x55, 0x5d, 0xb6, 0x8f, 0x6d, 0xd9, 0x16, 0x2f, 0xdd,
	0x7b, 0x6c, 0x0c, 0x6d, 0xcd, 0xec, 0x31, 0x05, 0xea, 0x30, 0x62, 0x03, 0x1d, 0xf9, 0x9a, 0x61,
	0xa0, 0x30, 0x62, 0x27, 0x63, 0x16, 0xa2, 0x6f, 0x73, 0xcc, 0xb5, 0xb4, 0xef, 0x2b, 0xf5, 0xbe,
	0x2b, 0x60, 0xa7, 0x7a, 0x92, 0xc4, 0x01, 0x55, 0xdd, 0xa3, 0x3a, 0xa6, 0xad, 0x9d, 0x43, 0xa6,
	0x2a, 0x36, 0x8d, 0x26, 0x74, 0xb7, 0x90, 0x9b, 0x22, 0x6b, 0xf5, 0x34, 0x8b, 0x21, 0xbf, 0xea,
	0x69, 0x3a, 0xff, 0x11, 0x6a, 0xff, 0x6a, 0x00, 0xea, 0x53, 0xc5, 0xd5, 0x4b, 0xdf, 0x4d, 0xaf,
	0xcf, 0xbf, 0xb5, 0xcf, 0x68, 0xf1, 0x96, 0xea, 0x67, 0xf4, 0x36, 0x95, 0xc0, 0x7f, 0x97, 0x11,
	0xf8, 0x3f, 0x87, 0xff, 0x5b, 0x0e, 0xef, 0x2d, 0x70, 0xf8, 0xd5, 0xc5, 0x7e, 0x78, 0x15, 0x8d,
	0x97, 0x21, 0xbf, 0x31, 0x0f, 0xf9, 0xb7, 0x61, 0x6a, 0xfc, 0x14, 0xb6, 0x7a, 0x3c, 0x96, 0x29,
	0x1f, 0x2d, 0x05, 0xee, 0x45, 0x58, 0xe7, 0x09, 0x4d, 0x89, 0xda, 0xb5, 0x4e, 0x66, 0x0a, 0xe5,
	0xfe, 0x94, 0xa7, 0x81, 0xa1, 0x1a, 0xb7, 0x6f, 0x04, 0x7c, 0xb5, 0xec, 0xba, 0x40, 0x8d, 0x91,
	0x18, 0x66, 0xd1, 0x45, 0x62, 0x88, 0x7f, 0x69, 0x00, 0xba, 0x2b, 0x25, 0x09, 0xce, 0x96, 0xc6,
	0xb0, 0x03, 0x6e, 0x4a, 0x93, 0xd1, 0x20, 0x88, 0x42, 0x1d, 0x42, 0xb7, 0xdf, 0x56, 0x72, 0x2f,
	0x0a, 0xab, 0x03, 0xd0, 0x93, 0x14, 0x39, 0xa5, 0x76, 0xb6, 0xd3, 0x6b, 0xe4, 0x83, 0x1b, 0xf0,
	0x28, 0x22, 0x71, 0x28, 0xbc, 0x35, 0xcd, 0xce, 0xb9, 0x8c, 0x6f, 0x97, 0xc2, 0x58, 0x32, 0xf2,
	0xe9, 0x59, 0xba, 0x59, 0x98, 0xa5, 0x1f, 0xc1, 0x96, 0xe9, 0xcb, 0x27, 0x2c, 0x0e, 0xf9, 0x8b,
	0xba, 0x0c, 0xb6, 0xa1, 0x75, 0x46, 0xd9, 0xf0, 0x4c, 0x66, 0x7c, 0x6d, 0x24, 0x15, 0xfe, 0x0b,
	0x16, 0xca, 0x33, 0xcb, 0x01, 0x46, 0xc0, 0x77, 0x61, 0xeb, 0xf0, 0x25, 0x0d, 0xc6, 0x72, 0x39,
	0xa7, 0x14, 0x33, 0x6a, 0xce, 0x65, 0xf4, 0xb8, 0xec, 0xe2, 0x0d, 0x52, 0x42, 0xef, 0xc3, 0x3a,
	0x7d, 0xc9, 0xe4, 0x20, 0xe0, 0x21, 0xb5, 0x71, 0xb9, 0x4a, 0xd1, 0xe3, 0x21, 0xc5, 0x9f, 0xce,
	0x4f, 0xfd, 0x85, 0xd7, 0x59, 0xc0, 0xc2, 0x34, 0x7b, 0x9d, 0xa9, 0x35, 0xfe, 0xac, 0xe2, 0x43,
	0xa3, 0x1e, 0x0c, 0x43, 0xe8, 0x1e, 0x4e, 0x68, 0xbc, 0x2c, 0x56, 0x39, 0x4d, 0xf2, 0x89, 0x5b,
	0xad, 0x55, 0x5d, 0x49, 0xa0, 0xa1, 0x69, 0x27, 0x6e, 0x23, 0xa9, 0x1c, 0x14, 0x2b, 0x0c, 0x62,
	0x12, 0x73, 0x4b, 0x2f, 0xae, 0x52, 0x1c, 0x93, 0x98, 0xdf, 0xfc, 0xd3, 0x05, 0x78, 0x6a, 0xbe,
	0xba, 0xfa, 0x0f, 0x7b, 0xe8, 0x13, 0x58, 0x55, 0x23, 0x36, 0xea, 0xda, 0xfe, 0xd4, 0x1f, 0x5e,
	0x3e, 0xb2, 0x52, 0x61, 0xfa, 0xc6, 0x2b, 0xe8, 0x73, 0x68, 0xdf, 0xa7, 0x52, 0x0d, 0xda, 0x35,
	0xe6, 0x85, 0x19, 0x1c, 0xaf, 0xa0, 0x6f, 0xc0, 0xcd, 0x5e, 0xfd, 0x68, 0x7b, 0x6e, 0x42, 0xb1,
	0x4f, 0xd5, 0xdf, 0xae, 0x1e, 0xcd, 0xf0, 0x0a, 0x3a, 0x80, 0x6e, 0x71, 0x70, 0xa8, 0xf5, 0xe0,
	0xcf, 0xe9, 0x0b, 0x53, 0x06, 0x5e, 0x41, 0xc7, 0x70, 0xae, 0x3c, 0xa9, 0xa0, 0x8b, 0xcb, 0x66,
	0x25, 0xbf, 0x7a, 0x77, 0xe6, 0xef, 0x10, 0x3a, 0x05, 0x06, 0x43, 0x3b, 0xb5, 0x6f, 0x79, 0x7f,
	0xa7, 0x96, 0xf0, 0xf0, 0x0a, 0xfa, 0x1e, 0xba, 0x45, 0x8e, 0x40, 0x59, 0x12, 0x15, 0x9c, 0xe4,
	0x57, 0xed, 0xcd, 0x3c, 0x1d, 0x41, 0xa7, 0xd0, 0xbc, 0x79, 0x40, 0x8b, 0xbc, 0xe2, 0x57, 0x6c,
	0xe5, 0x6e, 0xae, 0x35, 0x6e, 0x34, 0xd0, 0xdd, 0xac, 0x9b, 0x7b, 0x3c, 0x16, 0x7c, 0x64, 0x9b,
	0x3a, 0x8f, 0xad, 0xa2, 0xd3, 0xfd, 0x12, 0x0c, 0x4c, 0x5e, 0xc5, 0xc6, 0xcb, 0xcf, 0x56, 0x34,
	0xb4, 0x5f, 0xb5, 0x37, 0xcb, 0xeb, 0x1e, 0x74, 0x0a, 0xaf, 0xfc, 0x3c, 0xaf, 0xc5, 0x31, 0xe0,
	0x15, 0xf5, 0x39, 0x84, 0x6e, 0xf1, 0xeb, 0x79, 0x56, 0xe9, 0xc5, 0x4f, 0x6a, 0xff, 0x3d, 0xbb,
	0x37, 0xff, 0xf9, 0x6b, 0x70, 0x54, 0xee, 0xfc, 0x1c, 0x47, 0x95, 0xbf, 0x01, 0xfc, 0xea, 0xdd,
	0x99, 0xbf, 0x27, 0x70, 0x7e, 0x81, 0x1c, 0xd0, 0x25, 0x7b, 0xa8, 0xee, 0xff, 0x84, 0x5f, 0x6b,
	0x30, 0x73, 0xbc, 0x0f, 0x4e, 0x8f, 0x48, 0x74, 0x3e, 0x4f, 0x33, 0xcf, 0xae, 0xa0, 0xca, 0xcd,
	0x6f, 0x34, 0xd0, 0x3e, 0xb4, 0x34, 0xf1, 0x88, 0xb9, 0x9e, 0xde, 0xca, 0xa4, 0x02, 0x2b, 0xa9,
	0x03, 0xcf, 0x5a, 0xfa, 0x5f, 0xcd, 0x17, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x08, 0x5e, 0x3f,
	0x3d, 0xc5, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// YavirtdRPCClient is the client API for YavirtdRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YavirtdRPCClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingMessage, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoMessage, error)
	GetGuest(ctx context.Context, in *GetGuestOptions, opts ...grpc.CallOption) (*GetGuestMessage, error)
	GetGuestUUID(ctx context.Context, in *GetGuestOptions, opts ...grpc.CallOption) (*GetGuestUUIDMessage, error)
	GetGuestIDList(ctx context.Context, in *GetGuestIDListOptions, opts ...grpc.CallOption) (*GetGuestIDListMessage, error)
	CreateGuest(ctx context.Context, in *CreateGuestOptions, opts ...grpc.CallOption) (*CreateGuestMessage, error)
	ControlGuest(ctx context.Context, in *ControlGuestOptions, opts ...grpc.CallOption) (*ControlGuestMessage, error)
	AttachGuest(ctx context.Context, opts ...grpc.CallOption) (YavirtdRPC_AttachGuestClient, error)
	ResizeConsoleWindow(ctx context.Context, in *ResizeWindowOptions, opts ...grpc.CallOption) (*Empty, error)
	ExecuteGuest(ctx context.Context, in *ExecuteGuestOptions, opts ...grpc.CallOption) (*ExecuteGuestMessage, error)
	ResizeGuest(ctx context.Context, in *ResizeGuestOptions, opts ...grpc.CallOption) (*ControlGuestMessage, error)
	CaptureGuest(ctx context.Context, in *CaptureGuestOptions, opts ...grpc.CallOption) (*UserImageMessage, error)
	ConnectNetwork(ctx context.Context, in *ConnectNetworkOptions, opts ...grpc.CallOption) (*ConnectNetworkMessage, error)
	DisconnectNetwork(ctx context.Context, in *DisconnectNetworkOptions, opts ...grpc.CallOption) (*DisconnectNetworkMessage, error)
	Cat(ctx context.Context, in *CatOptions, opts ...grpc.CallOption) (YavirtdRPC_CatClient, error)
	Events(ctx context.Context, in *Empty, opts ...grpc.CallOption) (YavirtdRPC_EventsClient, error)
}

type yavirtdRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewYavirtdRPCClient(cc grpc.ClientConnInterface) YavirtdRPCClient {
	return &yavirtdRPCClient{cc}
}

func (c *yavirtdRPCClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoMessage, error) {
	out := new(InfoMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) GetGuest(ctx context.Context, in *GetGuestOptions, opts ...grpc.CallOption) (*GetGuestMessage, error) {
	out := new(GetGuestMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/GetGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) GetGuestUUID(ctx context.Context, in *GetGuestOptions, opts ...grpc.CallOption) (*GetGuestUUIDMessage, error) {
	out := new(GetGuestUUIDMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/GetGuestUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) GetGuestIDList(ctx context.Context, in *GetGuestIDListOptions, opts ...grpc.CallOption) (*GetGuestIDListMessage, error) {
	out := new(GetGuestIDListMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/GetGuestIDList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) CreateGuest(ctx context.Context, in *CreateGuestOptions, opts ...grpc.CallOption) (*CreateGuestMessage, error) {
	out := new(CreateGuestMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/CreateGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) ControlGuest(ctx context.Context, in *ControlGuestOptions, opts ...grpc.CallOption) (*ControlGuestMessage, error) {
	out := new(ControlGuestMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/ControlGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) AttachGuest(ctx context.Context, opts ...grpc.CallOption) (YavirtdRPC_AttachGuestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YavirtdRPC_serviceDesc.Streams[0], "/yavpb.YavirtdRPC/AttachGuest", opts...)
	if err != nil {
		return nil, err
	}
	x := &yavirtdRPCAttachGuestClient{stream}
	return x, nil
}

type YavirtdRPC_AttachGuestClient interface {
	Send(*AttachGuestOptions) error
	Recv() (*AttachGuestMessage, error)
	grpc.ClientStream
}

var file_grpc_gen_yavirtd_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x79, 0x61, 0x76, 0x69, 0x72,
	0x74, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x79, 0x61, 0x76, 0x70, 0x62, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x70,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x30, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x20, 0x0a, 0x0a, 0x43, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x18, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x69, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x22, 0x6d, 0x0a, 0x13,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x61, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6d, 0x69, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6d, 0x69, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x1a, 0x3a, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61,
	0x76, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x59, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x27, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x66, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61,
	0x66, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x38,
	0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x41, 0x0a,
	0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x22, 0x56, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x64, 0x72, 0x22, 0x2c, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x32, 0xf8, 0x07, 0x0a, 0x0a, 0x59, 0x61, 0x76, 0x69, 0x72, 0x74, 0x64, 0x52,
	0x50, 0x43, 0x12, 0x2a, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x2e, 0x79, 0x61, 0x76,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x79, 0x61, 0x76, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x79, 0x61, 0x76, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x16, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x79, 0x61,
	0x76, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x19, 0x2e, 0x79, 0x61,
	0x76, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x19, 0x2e, 0x79,
	0x61, 0x76, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a,
	0x13, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1a, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x0c, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x79,
	0x61, 0x76, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x79, 0x61, 0x76, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x17,
	0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x2e, 0x79, 0x61,
	0x76, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1c, 0x2e, 0x79, 0x61, 0x76, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f,
	0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x1f, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x2f, 0x0a, 0x03, 0x43, 0x61, 0x74, 0x12, 0x11, 0x2e, 0x79, 0x61, 0x76, 0x70,
	0x62, 0x2e, 0x43, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x11, 0x2e, 0x79,
	0x61, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x12, 0x2e, 0x79, 0x61, 0x76, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x10,
	0x5a, 0x0e, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x79, 0x61, 0x76, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_gen_yavirtd_proto_rawDescOnce sync.Once
	file_grpc_gen_yavirtd_proto_rawDescData = file_grpc_gen_yavirtd_proto_rawDesc
)

func file_grpc_gen_yavirtd_proto_rawDescGZIP() []byte {
	file_grpc_gen_yavirtd_proto_rawDescOnce.Do(func() {
		file_grpc_gen_yavirtd_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_gen_yavirtd_proto_rawDescData)
	})
	return file_grpc_gen_yavirtd_proto_rawDescData
}

var file_grpc_gen_yavirtd_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_grpc_gen_yavirtd_proto_goTypes = []interface{}{
	(*Empty)(nil),                    // 0: yavpb.Empty
	(*CopyOptions)(nil),              // 1: yavpb.CopyOptions
	(*CopyMessage)(nil),              // 2: yavpb.CopyMessage
	(*CatOptions)(nil),               // 3: yavpb.CatOptions
	(*CatMessage)(nil),               // 4: yavpb.CatMessage
	(*DisconnectNetworkOptions)(nil), // 5: yavpb.DisconnectNetworkOptions
	(*ConnectNetworkOptions)(nil),    // 6: yavpb.ConnectNetworkOptions
	(*CaptureGuestOptions)(nil),      // 7: yavpb.CaptureGuestOptions
	(*UserImageMessage)(nil),         // 8: yavpb.UserImageMessage
	(*PingMessage)(nil),              // 9: yavpb.PingMessage
	(*InfoMessage)(nil),              // 10: yavpb.InfoMessage
	(*GetGuestOptions)(nil),          // 11: yavpb.GetGuestOptions
	(*GetGuestMessage)(nil),          // 12: yavpb.GetGuestMessage
	(*GetGuestUUIDMessage)(nil),      // 13: yavpb.GetGuestUUIDMessage
	(*CreateGuestOptions)(nil),       // 14: yavpb.CreateGuestOptions
	(*ResizeGuestOptions)(nil),       // 15: yavpb.ResizeGuestOptions
	(*CreateGuestMessage)(nil),       // 16: yavpb.CreateGuestMessage
	(*ControlGuestOptions)(nil),      // 17: yavpb.ControlGuestOptions
	(*ControlGuestMessage)(nil),      // 18: yavpb.ControlGuestMessage
	(*AttachGuestOptions)(nil),       // 19: yavpb.AttachGuestOptions
	(*AttachGuestMessage)(nil),       // 20: yavpb.AttachGuestMessage
	(*ResizeWindowOptions)(nil),      // 21: yavpb.ResizeWindowOptions
	(*ExecuteGuestOptions)(nil),      // 22: yavpb.ExecuteGuestOptions
	(*ExecuteGuestMessage)(nil),      // 23: yavpb.ExecuteGuestMessage
	(*ConnectNetworkMessage)(nil),    // 24: yavpb.ConnectNetworkMessage
	(*DisconnectNetworkMessage)(nil), // 25: yavpb.DisconnectNetworkMessage
	nil,                              // 26: yavpb.GetGuestMessage.NetworksEntry
	nil,                              // 27: yavpb.CreateGuestOptions.VolumesEntry
	nil,                              // 28: yavpb.CreateGuestOptions.LabelsEntry
	nil,                              // 29: yavpb.ResizeGuestOptions.VolumesEntry
	nil,                              // 30: yavpb.CreateGuestMessage.NetworksEntry
}
var file_grpc_gen_yavirtd_proto_depIdxs = []int32{
	26, // 0: yavpb.GetGuestMessage.networks:type_name -> yavpb.GetGuestMessage.NetworksEntry
	27, // 1: yavpb.CreateGuestOptions.volumes:type_name -> yavpb.CreateGuestOptions.VolumesEntry
	28, // 2: yavpb.CreateGuestOptions.labels:type_name -> yavpb.CreateGuestOptions.LabelsEntry
	29, // 3: yavpb.ResizeGuestOptions.volumes:type_name -> yavpb.ResizeGuestOptions.VolumesEntry
	30, // 4: yavpb.CreateGuestMessage.networks:type_name -> yavpb.CreateGuestMessage.NetworksEntry
	0,  // 5: yavpb.YavirtdRPC.Ping:input_type -> yavpb.Empty
	0,  // 6: yavpb.YavirtdRPC.GetInfo:input_type -> yavpb.Empty
	11, // 7: yavpb.YavirtdRPC.GetGuest:input_type -> yavpb.GetGuestOptions
	11, // 8: yavpb.YavirtdRPC.GetGuestUUID:input_type -> yavpb.GetGuestOptions
	14, // 9: yavpb.YavirtdRPC.CreateGuest:input_type -> yavpb.CreateGuestOptions
	17, // 10: yavpb.YavirtdRPC.ControlGuest:input_type -> yavpb.ControlGuestOptions
	19, // 11: yavpb.YavirtdRPC.AttachGuest:input_type -> yavpb.AttachGuestOptions
	21, // 12: yavpb.YavirtdRPC.ResizeConsoleWindow:input_type -> yavpb.ResizeWindowOptions
	22, // 13: yavpb.YavirtdRPC.ExecuteGuest:input_type -> yavpb.ExecuteGuestOptions
	15, // 14: yavpb.YavirtdRPC.ResizeGuest:input_type -> yavpb.ResizeGuestOptions
	7,  // 15: yavpb.YavirtdRPC.CaptureGuest:input_type -> yavpb.CaptureGuestOptions
	6,  // 16: yavpb.YavirtdRPC.ConnectNetwork:input_type -> yavpb.ConnectNetworkOptions
	5,  // 17: yavpb.YavirtdRPC.DisconnectNetwork:input_type -> yavpb.DisconnectNetworkOptions
	3,  // 18: yavpb.YavirtdRPC.Cat:input_type -> yavpb.CatOptions
	1,  // 19: yavpb.YavirtdRPC.CopyToGuest:input_type -> yavpb.CopyOptions
	9,  // 20: yavpb.YavirtdRPC.Ping:output_type -> yavpb.PingMessage
	10, // 21: yavpb.YavirtdRPC.GetInfo:output_type -> yavpb.InfoMessage
	12, // 22: yavpb.YavirtdRPC.GetGuest:output_type -> yavpb.GetGuestMessage
	13, // 23: yavpb.YavirtdRPC.GetGuestUUID:output_type -> yavpb.GetGuestUUIDMessage
	16, // 24: yavpb.YavirtdRPC.CreateGuest:output_type -> yavpb.CreateGuestMessage
	18, // 25: yavpb.YavirtdRPC.ControlGuest:output_type -> yavpb.ControlGuestMessage
	20, // 26: yavpb.YavirtdRPC.AttachGuest:output_type -> yavpb.AttachGuestMessage
	0,  // 27: yavpb.YavirtdRPC.ResizeConsoleWindow:output_type -> yavpb.Empty
	23, // 28: yavpb.YavirtdRPC.ExecuteGuest:output_type -> yavpb.ExecuteGuestMessage
	18, // 29: yavpb.YavirtdRPC.ResizeGuest:output_type -> yavpb.ControlGuestMessage
	8,  // 30: yavpb.YavirtdRPC.CaptureGuest:output_type -> yavpb.UserImageMessage
	24, // 31: yavpb.YavirtdRPC.ConnectNetwork:output_type -> yavpb.ConnectNetworkMessage
	25, // 32: yavpb.YavirtdRPC.DisconnectNetwork:output_type -> yavpb.DisconnectNetworkMessage
	4,  // 33: yavpb.YavirtdRPC.Cat:output_type -> yavpb.CatMessage
	2,  // 34: yavpb.YavirtdRPC.CopyToGuest:output_type -> yavpb.CopyMessage
	20, // [20:35] is the sub-list for method output_type
	5,  // [5:20] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_grpc_gen_yavirtd_proto_init() }
func file_grpc_gen_yavirtd_proto_init() {
	if File_grpc_gen_yavirtd_proto != nil {
		return
	}
	return out, nil
}

func (c *yavirtdRPCClient) ResizeGuest(ctx context.Context, in *ResizeGuestOptions, opts ...grpc.CallOption) (*ControlGuestMessage, error) {
	out := new(ControlGuestMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/ResizeGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) CaptureGuest(ctx context.Context, in *CaptureGuestOptions, opts ...grpc.CallOption) (*UserImageMessage, error) {
	out := new(UserImageMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/CaptureGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) ConnectNetwork(ctx context.Context, in *ConnectNetworkOptions, opts ...grpc.CallOption) (*ConnectNetworkMessage, error) {
	out := new(ConnectNetworkMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/ConnectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) DisconnectNetwork(ctx context.Context, in *DisconnectNetworkOptions, opts ...grpc.CallOption) (*DisconnectNetworkMessage, error) {
	out := new(DisconnectNetworkMessage)
	err := c.cc.Invoke(ctx, "/yavpb.YavirtdRPC/DisconnectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) Cat(ctx context.Context, in *CatOptions, opts ...grpc.CallOption) (YavirtdRPC_CatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YavirtdRPC_serviceDesc.Streams[1], "/yavpb.YavirtdRPC/Cat", opts...)
	if err != nil {
		return nil, err
	}
	x := &yavirtdRPCCatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YavirtdRPC_CatClient interface {
	Recv() (*CatMessage, error)
	grpc.ClientStream
}

type yavirtdRPCCatClient struct {
	grpc.ClientStream
}

func (x *yavirtdRPCCatClient) Recv() (*CatMessage, error) {
	m := new(CatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yavirtdRPCClient) Events(ctx context.Context, in *Empty, opts ...grpc.CallOption) (YavirtdRPC_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YavirtdRPC_serviceDesc.Streams[2], "/yavpb.YavirtdRPC/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &yavirtdRPCEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YavirtdRPC_EventsClient interface {
	Recv() (*EventMessage, error)
	grpc.ClientStream
}

type yavirtdRPCEventsClient struct {
	grpc.ClientStream
}

func (x *yavirtdRPCEventsClient) Recv() (*EventMessage, error) {
	m := new(EventMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YavirtdRPCServer is the server API for YavirtdRPC service.
type YavirtdRPCServer interface {
	Ping(context.Context, *Empty) (*PingMessage, error)
	GetInfo(context.Context, *Empty) (*InfoMessage, error)
	GetGuest(context.Context, *GetGuestOptions) (*GetGuestMessage, error)
	GetGuestUUID(context.Context, *GetGuestOptions) (*GetGuestUUIDMessage, error)
	GetGuestIDList(context.Context, *GetGuestIDListOptions) (*GetGuestIDListMessage, error)
	CreateGuest(context.Context, *CreateGuestOptions) (*CreateGuestMessage, error)
	ControlGuest(context.Context, *ControlGuestOptions) (*ControlGuestMessage, error)
	AttachGuest(YavirtdRPC_AttachGuestServer) error
	ResizeConsoleWindow(context.Context, *ResizeWindowOptions) (*Empty, error)
	ExecuteGuest(context.Context, *ExecuteGuestOptions) (*ExecuteGuestMessage, error)
	ResizeGuest(context.Context, *ResizeGuestOptions) (*ControlGuestMessage, error)
	CaptureGuest(context.Context, *CaptureGuestOptions) (*UserImageMessage, error)
	ConnectNetwork(context.Context, *ConnectNetworkOptions) (*ConnectNetworkMessage, error)
	DisconnectNetwork(context.Context, *DisconnectNetworkOptions) (*DisconnectNetworkMessage, error)
	Cat(*CatOptions, YavirtdRPC_CatServer) error
	Events(*Empty, YavirtdRPC_EventsServer) error
}

// UnimplementedYavirtdRPCServer can be embedded to have forward compatible implementations.
type UnimplementedYavirtdRPCServer struct {
}

func (*UnimplementedYavirtdRPCServer) Ping(ctx context.Context, req *Empty) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedYavirtdRPCServer) GetInfo(ctx context.Context, req *Empty) (*InfoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedYavirtdRPCServer) GetGuest(ctx context.Context, req *GetGuestOptions) (*GetGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuest not implemented")
}
func (*UnimplementedYavirtdRPCServer) GetGuestUUID(ctx context.Context, req *GetGuestOptions) (*GetGuestUUIDMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestUUID not implemented")
}
func (*UnimplementedYavirtdRPCServer) GetGuestIDList(ctx context.Context, req *GetGuestIDListOptions) (*GetGuestIDListMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestIDList not implemented")
}
func (*UnimplementedYavirtdRPCServer) CreateGuest(ctx context.Context, req *CreateGuestOptions) (*CreateGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuest not implemented")
}
func (*UnimplementedYavirtdRPCServer) ControlGuest(ctx context.Context, req *ControlGuestOptions) (*ControlGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlGuest not implemented")
}
func (*UnimplementedYavirtdRPCServer) AttachGuest(srv YavirtdRPC_AttachGuestServer) error {
	return status.Errorf(codes.Unimplemented, "method AttachGuest not implemented")
}
func (*UnimplementedYavirtdRPCServer) ResizeConsoleWindow(ctx context.Context, req *ResizeWindowOptions) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeConsoleWindow not implemented")
}
func (*UnimplementedYavirtdRPCServer) ExecuteGuest(ctx context.Context, req *ExecuteGuestOptions) (*ExecuteGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGuest not implemented")
}
func (*UnimplementedYavirtdRPCServer) ResizeGuest(ctx context.Context, req *ResizeGuestOptions) (*ControlGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeGuest not implemented")
}
func (*UnimplementedYavirtdRPCServer) CaptureGuest(ctx context.Context, req *CaptureGuestOptions) (*UserImageMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureGuest not implemented")
}
func (*UnimplementedYavirtdRPCServer) ConnectNetwork(ctx context.Context, req *ConnectNetworkOptions) (*ConnectNetworkMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectNetwork not implemented")
}
func (*UnimplementedYavirtdRPCServer) DisconnectNetwork(ctx context.Context, req *DisconnectNetworkOptions) (*DisconnectNetworkMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectNetwork not implemented")
}
func (*UnimplementedYavirtdRPCServer) Cat(req *CatOptions, srv YavirtdRPC_CatServer) error {
	return status.Errorf(codes.Unimplemented, "method Cat not implemented")
}
func (*UnimplementedYavirtdRPCServer) Events(req *Empty, srv YavirtdRPC_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}

func RegisterYavirtdRPCServer(s *grpc.Server, srv YavirtdRPCServer) {
	s.RegisterService(&_YavirtdRPC_serviceDesc, srv)
}

func _YavirtdRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_GetGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).GetGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/GetGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).GetGuest(ctx, req.(*GetGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_GetGuestUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).GetGuestUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/GetGuestUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).GetGuestUUID(ctx, req.(*GetGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_GetGuestIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestIDListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).GetGuestIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/GetGuestIDList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).GetGuestIDList(ctx, req.(*GetGuestIDListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_CreateGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).CreateGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/CreateGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).CreateGuest(ctx, req.(*CreateGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ControlGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ControlGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/ControlGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ControlGuest(ctx, req.(*ControlGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_AttachGuest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YavirtdRPCServer).AttachGuest(&yavirtdRPCAttachGuestServer{stream})
}

type YavirtdRPC_AttachGuestServer interface {
	Send(*AttachGuestMessage) error
	Recv() (*AttachGuestOptions, error)
	grpc.ServerStream
}

type yavirtdRPCAttachGuestServer struct {
	grpc.ServerStream
}

func (x *yavirtdRPCAttachGuestServer) Send(m *AttachGuestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yavirtdRPCAttachGuestServer) Recv() (*AttachGuestOptions, error) {
	m := new(AttachGuestOptions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _YavirtdRPC_ResizeConsoleWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeWindowOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ResizeConsoleWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/ResizeConsoleWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ResizeConsoleWindow(ctx, req.(*ResizeWindowOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ExecuteGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ExecuteGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/ExecuteGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ExecuteGuest(ctx, req.(*ExecuteGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ResizeGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ResizeGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/ResizeGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ResizeGuest(ctx, req.(*ResizeGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_CaptureGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).CaptureGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/CaptureGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).CaptureGuest(ctx, req.(*CaptureGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ConnectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectNetworkOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ConnectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/ConnectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ConnectNetwork(ctx, req.(*ConnectNetworkOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_DisconnectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectNetworkOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).DisconnectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yavpb.YavirtdRPC/DisconnectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).DisconnectNetwork(ctx, req.(*DisconnectNetworkOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_Cat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CatOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YavirtdRPCServer).Cat(m, &yavirtdRPCCatServer{stream})
}

type YavirtdRPC_CatServer interface {
	Send(*CatMessage) error
	grpc.ServerStream
}

type yavirtdRPCCatServer struct {
	grpc.ServerStream
}

func (x *yavirtdRPCCatServer) Send(m *CatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _YavirtdRPC_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YavirtdRPCServer).Events(m, &yavirtdRPCEventsServer{stream})
}

type YavirtdRPC_EventsServer interface {
	Send(*EventMessage) error
	grpc.ServerStream
}

type yavirtdRPCEventsServer struct {
	grpc.ServerStream
}

func (x *yavirtdRPCEventsServer) Send(m *EventMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _YavirtdRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yavpb.YavirtdRPC",
	HandlerType: (*YavirtdRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _YavirtdRPC_Ping_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _YavirtdRPC_GetInfo_Handler,
		},
		{
			MethodName: "GetGuest",
			Handler:    _YavirtdRPC_GetGuest_Handler,
		},
		{
			MethodName: "GetGuestUUID",
			Handler:    _YavirtdRPC_GetGuestUUID_Handler,
		},
		{
			MethodName: "CreateGuest",
			Handler:    _YavirtdRPC_CreateGuest_Handler,
		},
		{
			MethodName: "ControlGuest",
			Handler:    _YavirtdRPC_ControlGuest_Handler,
		},
		{
			MethodName: "ResizeConsoleWindow",
			Handler:    _YavirtdRPC_ResizeConsoleWindow_Handler,
		},
		{
			MethodName: "ExecuteGuest",
			Handler:    _YavirtdRPC_ExecuteGuest_Handler,
		},
		{
			MethodName: "ResizeGuest",
			Handler:    _YavirtdRPC_ResizeGuest_Handler,
		},
		{
			MethodName: "CaptureGuest",
			Handler:    _YavirtdRPC_CaptureGuest_Handler,
		},
		{
			MethodName: "ConnectNetwork",
			Handler:    _YavirtdRPC_ConnectNetwork_Handler,
		},
		{
			MethodName: "DisconnectNetwork",
			Handler:    _YavirtdRPC_DisconnectNetwork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AttachGuest",
			Handler:       _YavirtdRPC_AttachGuest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Cat",
			Handler:       _YavirtdRPC_Cat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/gen/yavirtd.proto",
}
