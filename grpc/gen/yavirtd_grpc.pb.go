// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/gen/yavirtd.proto

package yavpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YavirtdRPCClient is the client API for YavirtdRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YavirtdRPCClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingMessage, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoMessage, error)
	GetGuest(ctx context.Context, in *GetGuestOptions, opts ...grpc.CallOption) (*GetGuestMessage, error)
	GetGuestUUID(ctx context.Context, in *GetGuestOptions, opts ...grpc.CallOption) (*GetGuestUUIDMessage, error)
	GetGuestIDList(ctx context.Context, in *GetGuestIDListOptions, opts ...grpc.CallOption) (*GetGuestIDListMessage, error)
	CreateGuest(ctx context.Context, in *CreateGuestOptions, opts ...grpc.CallOption) (*CreateGuestMessage, error)
	ControlGuest(ctx context.Context, in *ControlGuestOptions, opts ...grpc.CallOption) (*ControlGuestMessage, error)
	AttachGuest(ctx context.Context, opts ...grpc.CallOption) (YavirtdRPC_AttachGuestClient, error)
	ResizeConsoleWindow(ctx context.Context, in *ResizeWindowOptions, opts ...grpc.CallOption) (*Empty, error)
	ExecuteGuest(ctx context.Context, in *ExecuteGuestOptions, opts ...grpc.CallOption) (*ExecuteGuestMessage, error)
	ExecExitCode(ctx context.Context, in *ExecExitCodeOptions, opts ...grpc.CallOption) (*ExecExitCodeMessage, error)
	ResizeGuest(ctx context.Context, in *ResizeGuestOptions, opts ...grpc.CallOption) (*ControlGuestMessage, error)
	CaptureGuest(ctx context.Context, in *CaptureGuestOptions, opts ...grpc.CallOption) (*UserImageMessage, error)
	ConnectNetwork(ctx context.Context, in *ConnectNetworkOptions, opts ...grpc.CallOption) (*ConnectNetworkMessage, error)
	DisconnectNetwork(ctx context.Context, in *DisconnectNetworkOptions, opts ...grpc.CallOption) (*DisconnectNetworkMessage, error)
	Cat(ctx context.Context, in *CatOptions, opts ...grpc.CallOption) (YavirtdRPC_CatClient, error)
	CopyToGuest(ctx context.Context, opts ...grpc.CallOption) (YavirtdRPC_CopyToGuestClient, error)
	Events(ctx context.Context, in *EventsOptions, opts ...grpc.CallOption) (YavirtdRPC_EventsClient, error)
	WaitGuest(ctx context.Context, in *WaitGuestOptions, opts ...grpc.CallOption) (*WaitGuestMessage, error)
	NetworkList(ctx context.Context, in *NetworkListOptions, opts ...grpc.CallOption) (*NetworkListMessage, error)
	Log(ctx context.Context, in *LogOptions, opts ...grpc.CallOption) (YavirtdRPC_LogClient, error)
	ListSnapshot(ctx context.Context, in *ListSnapshotOptions, opts ...grpc.CallOption) (*ListSnapshotMessage, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotOptions, opts ...grpc.CallOption) (*CreateSnapshotMessage, error)
	CommitSnapshot(ctx context.Context, in *CommitSnapshotOptions, opts ...grpc.CallOption) (*CommitSnapshotMessage, error)
	RestoreSnapshot(ctx context.Context, in *RestoreSnapshotOptions, opts ...grpc.CallOption) (*RestoreSnapshotMessage, error)
	PushImage(ctx context.Context, in *PushImageOptions, opts ...grpc.CallOption) (*PushImageMessage, error)
	RemoveImage(ctx context.Context, in *RemoveImageOptions, opts ...grpc.CallOption) (*RemoveImageMessage, error)
	ListImage(ctx context.Context, in *ListImageOptions, opts ...grpc.CallOption) (*ListImageMessage, error)
	PullImage(ctx context.Context, in *PullImageOptions, opts ...grpc.CallOption) (*PullImageMessage, error)
	DigestImage(ctx context.Context, in *DigestImageOptions, opts ...grpc.CallOption) (*DigestImageMessage, error)
}

type yavirtdRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewYavirtdRPCClient(cc grpc.ClientConnInterface) YavirtdRPCClient {
	return &yavirtdRPCClient{cc}
}

func (c *yavirtdRPCClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoMessage, error) {
	out := new(InfoMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) GetGuest(ctx context.Context, in *GetGuestOptions, opts ...grpc.CallOption) (*GetGuestMessage, error) {
	out := new(GetGuestMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/GetGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) GetGuestUUID(ctx context.Context, in *GetGuestOptions, opts ...grpc.CallOption) (*GetGuestUUIDMessage, error) {
	out := new(GetGuestUUIDMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/GetGuestUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) GetGuestIDList(ctx context.Context, in *GetGuestIDListOptions, opts ...grpc.CallOption) (*GetGuestIDListMessage, error) {
	out := new(GetGuestIDListMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/GetGuestIDList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) CreateGuest(ctx context.Context, in *CreateGuestOptions, opts ...grpc.CallOption) (*CreateGuestMessage, error) {
	out := new(CreateGuestMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/CreateGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) ControlGuest(ctx context.Context, in *ControlGuestOptions, opts ...grpc.CallOption) (*ControlGuestMessage, error) {
	out := new(ControlGuestMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/ControlGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) AttachGuest(ctx context.Context, opts ...grpc.CallOption) (YavirtdRPC_AttachGuestClient, error) {
	stream, err := c.cc.NewStream(ctx, &YavirtdRPC_ServiceDesc.Streams[0], "/YavirtdRPC/AttachGuest", opts...)
	if err != nil {
		return nil, err
	}
	x := &yavirtdRPCAttachGuestClient{stream}
	return x, nil
}

type YavirtdRPC_AttachGuestClient interface {
	Send(*AttachGuestOptions) error
	Recv() (*AttachGuestMessage, error)
	grpc.ClientStream
}

type yavirtdRPCAttachGuestClient struct {
	grpc.ClientStream
}

func (x *yavirtdRPCAttachGuestClient) Send(m *AttachGuestOptions) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yavirtdRPCAttachGuestClient) Recv() (*AttachGuestMessage, error) {
	m := new(AttachGuestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yavirtdRPCClient) ResizeConsoleWindow(ctx context.Context, in *ResizeWindowOptions, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/ResizeConsoleWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) ExecuteGuest(ctx context.Context, in *ExecuteGuestOptions, opts ...grpc.CallOption) (*ExecuteGuestMessage, error) {
	out := new(ExecuteGuestMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/ExecuteGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) ExecExitCode(ctx context.Context, in *ExecExitCodeOptions, opts ...grpc.CallOption) (*ExecExitCodeMessage, error) {
	out := new(ExecExitCodeMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/ExecExitCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) ResizeGuest(ctx context.Context, in *ResizeGuestOptions, opts ...grpc.CallOption) (*ControlGuestMessage, error) {
	out := new(ControlGuestMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/ResizeGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) CaptureGuest(ctx context.Context, in *CaptureGuestOptions, opts ...grpc.CallOption) (*UserImageMessage, error) {
	out := new(UserImageMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/CaptureGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) ConnectNetwork(ctx context.Context, in *ConnectNetworkOptions, opts ...grpc.CallOption) (*ConnectNetworkMessage, error) {
	out := new(ConnectNetworkMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/ConnectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) DisconnectNetwork(ctx context.Context, in *DisconnectNetworkOptions, opts ...grpc.CallOption) (*DisconnectNetworkMessage, error) {
	out := new(DisconnectNetworkMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/DisconnectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) Cat(ctx context.Context, in *CatOptions, opts ...grpc.CallOption) (YavirtdRPC_CatClient, error) {
	stream, err := c.cc.NewStream(ctx, &YavirtdRPC_ServiceDesc.Streams[1], "/YavirtdRPC/Cat", opts...)
	if err != nil {
		return nil, err
	}
	x := &yavirtdRPCCatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YavirtdRPC_CatClient interface {
	Recv() (*CatMessage, error)
	grpc.ClientStream
}

type yavirtdRPCCatClient struct {
	grpc.ClientStream
}

func (x *yavirtdRPCCatClient) Recv() (*CatMessage, error) {
	m := new(CatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yavirtdRPCClient) CopyToGuest(ctx context.Context, opts ...grpc.CallOption) (YavirtdRPC_CopyToGuestClient, error) {
	stream, err := c.cc.NewStream(ctx, &YavirtdRPC_ServiceDesc.Streams[2], "/YavirtdRPC/CopyToGuest", opts...)
	if err != nil {
		return nil, err
	}
	x := &yavirtdRPCCopyToGuestClient{stream}
	return x, nil
}

type YavirtdRPC_CopyToGuestClient interface {
	Send(*CopyOptions) error
	CloseAndRecv() (*CopyMessage, error)
	grpc.ClientStream
}

type yavirtdRPCCopyToGuestClient struct {
	grpc.ClientStream
}

func (x *yavirtdRPCCopyToGuestClient) Send(m *CopyOptions) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yavirtdRPCCopyToGuestClient) CloseAndRecv() (*CopyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CopyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yavirtdRPCClient) Events(ctx context.Context, in *EventsOptions, opts ...grpc.CallOption) (YavirtdRPC_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &YavirtdRPC_ServiceDesc.Streams[3], "/YavirtdRPC/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &yavirtdRPCEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YavirtdRPC_EventsClient interface {
	Recv() (*EventMessage, error)
	grpc.ClientStream
}

type yavirtdRPCEventsClient struct {
	grpc.ClientStream
}

func (x *yavirtdRPCEventsClient) Recv() (*EventMessage, error) {
	m := new(EventMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yavirtdRPCClient) WaitGuest(ctx context.Context, in *WaitGuestOptions, opts ...grpc.CallOption) (*WaitGuestMessage, error) {
	out := new(WaitGuestMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/WaitGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) NetworkList(ctx context.Context, in *NetworkListOptions, opts ...grpc.CallOption) (*NetworkListMessage, error) {
	out := new(NetworkListMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/NetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) Log(ctx context.Context, in *LogOptions, opts ...grpc.CallOption) (YavirtdRPC_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &YavirtdRPC_ServiceDesc.Streams[4], "/YavirtdRPC/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &yavirtdRPCLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YavirtdRPC_LogClient interface {
	Recv() (*LogMessage, error)
	grpc.ClientStream
}

type yavirtdRPCLogClient struct {
	grpc.ClientStream
}

func (x *yavirtdRPCLogClient) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yavirtdRPCClient) ListSnapshot(ctx context.Context, in *ListSnapshotOptions, opts ...grpc.CallOption) (*ListSnapshotMessage, error) {
	out := new(ListSnapshotMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/ListSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotOptions, opts ...grpc.CallOption) (*CreateSnapshotMessage, error) {
	out := new(CreateSnapshotMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/CreateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) CommitSnapshot(ctx context.Context, in *CommitSnapshotOptions, opts ...grpc.CallOption) (*CommitSnapshotMessage, error) {
	out := new(CommitSnapshotMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/CommitSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) RestoreSnapshot(ctx context.Context, in *RestoreSnapshotOptions, opts ...grpc.CallOption) (*RestoreSnapshotMessage, error) {
	out := new(RestoreSnapshotMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/RestoreSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) PushImage(ctx context.Context, in *PushImageOptions, opts ...grpc.CallOption) (*PushImageMessage, error) {
	out := new(PushImageMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/PushImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) RemoveImage(ctx context.Context, in *RemoveImageOptions, opts ...grpc.CallOption) (*RemoveImageMessage, error) {
	out := new(RemoveImageMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/RemoveImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) ListImage(ctx context.Context, in *ListImageOptions, opts ...grpc.CallOption) (*ListImageMessage, error) {
	out := new(ListImageMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/ListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) PullImage(ctx context.Context, in *PullImageOptions, opts ...grpc.CallOption) (*PullImageMessage, error) {
	out := new(PullImageMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/PullImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yavirtdRPCClient) DigestImage(ctx context.Context, in *DigestImageOptions, opts ...grpc.CallOption) (*DigestImageMessage, error) {
	out := new(DigestImageMessage)
	err := c.cc.Invoke(ctx, "/YavirtdRPC/DigestImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YavirtdRPCServer is the server API for YavirtdRPC service.
// All implementations should embed UnimplementedYavirtdRPCServer
// for forward compatibility
type YavirtdRPCServer interface {
	Ping(context.Context, *Empty) (*PingMessage, error)
	GetInfo(context.Context, *Empty) (*InfoMessage, error)
	GetGuest(context.Context, *GetGuestOptions) (*GetGuestMessage, error)
	GetGuestUUID(context.Context, *GetGuestOptions) (*GetGuestUUIDMessage, error)
	GetGuestIDList(context.Context, *GetGuestIDListOptions) (*GetGuestIDListMessage, error)
	CreateGuest(context.Context, *CreateGuestOptions) (*CreateGuestMessage, error)
	ControlGuest(context.Context, *ControlGuestOptions) (*ControlGuestMessage, error)
	AttachGuest(YavirtdRPC_AttachGuestServer) error
	ResizeConsoleWindow(context.Context, *ResizeWindowOptions) (*Empty, error)
	ExecuteGuest(context.Context, *ExecuteGuestOptions) (*ExecuteGuestMessage, error)
	ExecExitCode(context.Context, *ExecExitCodeOptions) (*ExecExitCodeMessage, error)
	ResizeGuest(context.Context, *ResizeGuestOptions) (*ControlGuestMessage, error)
	CaptureGuest(context.Context, *CaptureGuestOptions) (*UserImageMessage, error)
	ConnectNetwork(context.Context, *ConnectNetworkOptions) (*ConnectNetworkMessage, error)
	DisconnectNetwork(context.Context, *DisconnectNetworkOptions) (*DisconnectNetworkMessage, error)
	Cat(*CatOptions, YavirtdRPC_CatServer) error
	CopyToGuest(YavirtdRPC_CopyToGuestServer) error
	Events(*EventsOptions, YavirtdRPC_EventsServer) error
	WaitGuest(context.Context, *WaitGuestOptions) (*WaitGuestMessage, error)
	NetworkList(context.Context, *NetworkListOptions) (*NetworkListMessage, error)
	Log(*LogOptions, YavirtdRPC_LogServer) error
	ListSnapshot(context.Context, *ListSnapshotOptions) (*ListSnapshotMessage, error)
	CreateSnapshot(context.Context, *CreateSnapshotOptions) (*CreateSnapshotMessage, error)
	CommitSnapshot(context.Context, *CommitSnapshotOptions) (*CommitSnapshotMessage, error)
	RestoreSnapshot(context.Context, *RestoreSnapshotOptions) (*RestoreSnapshotMessage, error)
	PushImage(context.Context, *PushImageOptions) (*PushImageMessage, error)
	RemoveImage(context.Context, *RemoveImageOptions) (*RemoveImageMessage, error)
	ListImage(context.Context, *ListImageOptions) (*ListImageMessage, error)
	PullImage(context.Context, *PullImageOptions) (*PullImageMessage, error)
	DigestImage(context.Context, *DigestImageOptions) (*DigestImageMessage, error)
}

// UnimplementedYavirtdRPCServer should be embedded to have forward compatible implementations.
type UnimplementedYavirtdRPCServer struct {
}

func (UnimplementedYavirtdRPCServer) Ping(context.Context, *Empty) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedYavirtdRPCServer) GetInfo(context.Context, *Empty) (*InfoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedYavirtdRPCServer) GetGuest(context.Context, *GetGuestOptions) (*GetGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) GetGuestUUID(context.Context, *GetGuestOptions) (*GetGuestUUIDMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestUUID not implemented")
}
func (UnimplementedYavirtdRPCServer) GetGuestIDList(context.Context, *GetGuestIDListOptions) (*GetGuestIDListMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestIDList not implemented")
}
func (UnimplementedYavirtdRPCServer) CreateGuest(context.Context, *CreateGuestOptions) (*CreateGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) ControlGuest(context.Context, *ControlGuestOptions) (*ControlGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) AttachGuest(YavirtdRPC_AttachGuestServer) error {
	return status.Errorf(codes.Unimplemented, "method AttachGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) ResizeConsoleWindow(context.Context, *ResizeWindowOptions) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeConsoleWindow not implemented")
}
func (UnimplementedYavirtdRPCServer) ExecuteGuest(context.Context, *ExecuteGuestOptions) (*ExecuteGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) ExecExitCode(context.Context, *ExecExitCodeOptions) (*ExecExitCodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecExitCode not implemented")
}
func (UnimplementedYavirtdRPCServer) ResizeGuest(context.Context, *ResizeGuestOptions) (*ControlGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) CaptureGuest(context.Context, *CaptureGuestOptions) (*UserImageMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) ConnectNetwork(context.Context, *ConnectNetworkOptions) (*ConnectNetworkMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectNetwork not implemented")
}
func (UnimplementedYavirtdRPCServer) DisconnectNetwork(context.Context, *DisconnectNetworkOptions) (*DisconnectNetworkMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectNetwork not implemented")
}
func (UnimplementedYavirtdRPCServer) Cat(*CatOptions, YavirtdRPC_CatServer) error {
	return status.Errorf(codes.Unimplemented, "method Cat not implemented")
}
func (UnimplementedYavirtdRPCServer) CopyToGuest(YavirtdRPC_CopyToGuestServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyToGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) Events(*EventsOptions, YavirtdRPC_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedYavirtdRPCServer) WaitGuest(context.Context, *WaitGuestOptions) (*WaitGuestMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitGuest not implemented")
}
func (UnimplementedYavirtdRPCServer) NetworkList(context.Context, *NetworkListOptions) (*NetworkListMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkList not implemented")
}
func (UnimplementedYavirtdRPCServer) Log(*LogOptions, YavirtdRPC_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedYavirtdRPCServer) ListSnapshot(context.Context, *ListSnapshotOptions) (*ListSnapshotMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshot not implemented")
}
func (UnimplementedYavirtdRPCServer) CreateSnapshot(context.Context, *CreateSnapshotOptions) (*CreateSnapshotMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedYavirtdRPCServer) CommitSnapshot(context.Context, *CommitSnapshotOptions) (*CommitSnapshotMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitSnapshot not implemented")
}
func (UnimplementedYavirtdRPCServer) RestoreSnapshot(context.Context, *RestoreSnapshotOptions) (*RestoreSnapshotMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreSnapshot not implemented")
}
func (UnimplementedYavirtdRPCServer) PushImage(context.Context, *PushImageOptions) (*PushImageMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushImage not implemented")
}
func (UnimplementedYavirtdRPCServer) RemoveImage(context.Context, *RemoveImageOptions) (*RemoveImageMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveImage not implemented")
}
func (UnimplementedYavirtdRPCServer) ListImage(context.Context, *ListImageOptions) (*ListImageMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}
func (UnimplementedYavirtdRPCServer) PullImage(context.Context, *PullImageOptions) (*PullImageMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullImage not implemented")
}
func (UnimplementedYavirtdRPCServer) DigestImage(context.Context, *DigestImageOptions) (*DigestImageMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigestImage not implemented")
}

// UnsafeYavirtdRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YavirtdRPCServer will
// result in compilation errors.
type UnsafeYavirtdRPCServer interface {
	mustEmbedUnimplementedYavirtdRPCServer()
}

func RegisterYavirtdRPCServer(s grpc.ServiceRegistrar, srv YavirtdRPCServer) {
	s.RegisterService(&YavirtdRPC_ServiceDesc, srv)
}

func _YavirtdRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_GetGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).GetGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/GetGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).GetGuest(ctx, req.(*GetGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_GetGuestUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).GetGuestUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/GetGuestUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).GetGuestUUID(ctx, req.(*GetGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_GetGuestIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestIDListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).GetGuestIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/GetGuestIDList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).GetGuestIDList(ctx, req.(*GetGuestIDListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_CreateGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).CreateGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/CreateGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).CreateGuest(ctx, req.(*CreateGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ControlGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ControlGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/ControlGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ControlGuest(ctx, req.(*ControlGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_AttachGuest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YavirtdRPCServer).AttachGuest(&yavirtdRPCAttachGuestServer{stream})
}

type YavirtdRPC_AttachGuestServer interface {
	Send(*AttachGuestMessage) error
	Recv() (*AttachGuestOptions, error)
	grpc.ServerStream
}

type yavirtdRPCAttachGuestServer struct {
	grpc.ServerStream
}

func (x *yavirtdRPCAttachGuestServer) Send(m *AttachGuestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yavirtdRPCAttachGuestServer) Recv() (*AttachGuestOptions, error) {
	m := new(AttachGuestOptions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _YavirtdRPC_ResizeConsoleWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeWindowOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ResizeConsoleWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/ResizeConsoleWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ResizeConsoleWindow(ctx, req.(*ResizeWindowOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ExecuteGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ExecuteGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/ExecuteGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ExecuteGuest(ctx, req.(*ExecuteGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ExecExitCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecExitCodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ExecExitCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/ExecExitCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ExecExitCode(ctx, req.(*ExecExitCodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ResizeGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ResizeGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/ResizeGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ResizeGuest(ctx, req.(*ResizeGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_CaptureGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).CaptureGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/CaptureGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).CaptureGuest(ctx, req.(*CaptureGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ConnectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectNetworkOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ConnectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/ConnectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ConnectNetwork(ctx, req.(*ConnectNetworkOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_DisconnectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectNetworkOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).DisconnectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/DisconnectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).DisconnectNetwork(ctx, req.(*DisconnectNetworkOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_Cat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CatOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YavirtdRPCServer).Cat(m, &yavirtdRPCCatServer{stream})
}

type YavirtdRPC_CatServer interface {
	Send(*CatMessage) error
	grpc.ServerStream
}

type yavirtdRPCCatServer struct {
	grpc.ServerStream
}

func (x *yavirtdRPCCatServer) Send(m *CatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _YavirtdRPC_CopyToGuest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YavirtdRPCServer).CopyToGuest(&yavirtdRPCCopyToGuestServer{stream})
}

type YavirtdRPC_CopyToGuestServer interface {
	SendAndClose(*CopyMessage) error
	Recv() (*CopyOptions, error)
	grpc.ServerStream
}

type yavirtdRPCCopyToGuestServer struct {
	grpc.ServerStream
}

func (x *yavirtdRPCCopyToGuestServer) SendAndClose(m *CopyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yavirtdRPCCopyToGuestServer) Recv() (*CopyOptions, error) {
	m := new(CopyOptions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _YavirtdRPC_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YavirtdRPCServer).Events(m, &yavirtdRPCEventsServer{stream})
}

type YavirtdRPC_EventsServer interface {
	Send(*EventMessage) error
	grpc.ServerStream
}

type yavirtdRPCEventsServer struct {
	grpc.ServerStream
}

func (x *yavirtdRPCEventsServer) Send(m *EventMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _YavirtdRPC_WaitGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitGuestOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).WaitGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/WaitGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).WaitGuest(ctx, req.(*WaitGuestOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_NetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkListOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).NetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/NetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).NetworkList(ctx, req.(*NetworkListOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YavirtdRPCServer).Log(m, &yavirtdRPCLogServer{stream})
}

type YavirtdRPC_LogServer interface {
	Send(*LogMessage) error
	grpc.ServerStream
}

type yavirtdRPCLogServer struct {
	grpc.ServerStream
}

func (x *yavirtdRPCLogServer) Send(m *LogMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _YavirtdRPC_ListSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ListSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/ListSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ListSnapshot(ctx, req.(*ListSnapshotOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).CreateSnapshot(ctx, req.(*CreateSnapshotOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_CommitSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitSnapshotOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).CommitSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/CommitSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).CommitSnapshot(ctx, req.(*CommitSnapshotOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_RestoreSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreSnapshotOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).RestoreSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/RestoreSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).RestoreSnapshot(ctx, req.(*RestoreSnapshotOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_PushImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushImageOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).PushImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/PushImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).PushImage(ctx, req.(*PushImageOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_RemoveImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveImageOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).RemoveImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/RemoveImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).RemoveImage(ctx, req.(*RemoveImageOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_ListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImageOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).ListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/ListImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).ListImage(ctx, req.(*ListImageOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_PullImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullImageOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).PullImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/PullImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).PullImage(ctx, req.(*PullImageOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _YavirtdRPC_DigestImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigestImageOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YavirtdRPCServer).DigestImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YavirtdRPC/DigestImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YavirtdRPCServer).DigestImage(ctx, req.(*DigestImageOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// YavirtdRPC_ServiceDesc is the grpc.ServiceDesc for YavirtdRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YavirtdRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YavirtdRPC",
	HandlerType: (*YavirtdRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _YavirtdRPC_Ping_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _YavirtdRPC_GetInfo_Handler,
		},
		{
			MethodName: "GetGuest",
			Handler:    _YavirtdRPC_GetGuest_Handler,
		},
		{
			MethodName: "GetGuestUUID",
			Handler:    _YavirtdRPC_GetGuestUUID_Handler,
		},
		{
			MethodName: "GetGuestIDList",
			Handler:    _YavirtdRPC_GetGuestIDList_Handler,
		},
		{
			MethodName: "CreateGuest",
			Handler:    _YavirtdRPC_CreateGuest_Handler,
		},
		{
			MethodName: "ControlGuest",
			Handler:    _YavirtdRPC_ControlGuest_Handler,
		},
		{
			MethodName: "ResizeConsoleWindow",
			Handler:    _YavirtdRPC_ResizeConsoleWindow_Handler,
		},
		{
			MethodName: "ExecuteGuest",
			Handler:    _YavirtdRPC_ExecuteGuest_Handler,
		},
		{
			MethodName: "ExecExitCode",
			Handler:    _YavirtdRPC_ExecExitCode_Handler,
		},
		{
			MethodName: "ResizeGuest",
			Handler:    _YavirtdRPC_ResizeGuest_Handler,
		},
		{
			MethodName: "CaptureGuest",
			Handler:    _YavirtdRPC_CaptureGuest_Handler,
		},
		{
			MethodName: "ConnectNetwork",
			Handler:    _YavirtdRPC_ConnectNetwork_Handler,
		},
		{
			MethodName: "DisconnectNetwork",
			Handler:    _YavirtdRPC_DisconnectNetwork_Handler,
		},
		{
			MethodName: "WaitGuest",
			Handler:    _YavirtdRPC_WaitGuest_Handler,
		},
		{
			MethodName: "NetworkList",
			Handler:    _YavirtdRPC_NetworkList_Handler,
		},
		{
			MethodName: "ListSnapshot",
			Handler:    _YavirtdRPC_ListSnapshot_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _YavirtdRPC_CreateSnapshot_Handler,
		},
		{
			MethodName: "CommitSnapshot",
			Handler:    _YavirtdRPC_CommitSnapshot_Handler,
		},
		{
			MethodName: "RestoreSnapshot",
			Handler:    _YavirtdRPC_RestoreSnapshot_Handler,
		},
		{
			MethodName: "PushImage",
			Handler:    _YavirtdRPC_PushImage_Handler,
		},
		{
			MethodName: "RemoveImage",
			Handler:    _YavirtdRPC_RemoveImage_Handler,
		},
		{
			MethodName: "ListImage",
			Handler:    _YavirtdRPC_ListImage_Handler,
		},
		{
			MethodName: "PullImage",
			Handler:    _YavirtdRPC_PullImage_Handler,
		},
		{
			MethodName: "DigestImage",
			Handler:    _YavirtdRPC_DigestImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AttachGuest",
			Handler:       _YavirtdRPC_AttachGuest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Cat",
			Handler:       _YavirtdRPC_Cat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CopyToGuest",
			Handler:       _YavirtdRPC_CopyToGuest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _YavirtdRPC_Events_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Log",
			Handler:       _YavirtdRPC_Log_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/gen/yavirtd.proto",
}
